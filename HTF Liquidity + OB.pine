// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © sbtnc
// © GM 2023

//@version=5
indicator("HTF Liquidity Levels", "HTF Liquidity", overlay=true, max_labels_count=500, max_lines_count=500, max_boxes_count=500)
max_bars_back(time,4998)

//--------------------------------------------------------------------
//                               Inputs
//--------------------------------------------------------------------
var g_htf                       = "HTF Liquidity"
var g_intraday                  = "Intraday Liquidity"
var g_purged                    = "Purged Liquidity"

short_mode_lq                   = input.bool(true, "Short mode")
box_mode_lq                     = input.bool(true, "Box mode")
input_start_lq                  = input.int(0, "Start", -9999999999, 9999999999, 1, inline = "box_position", tooltip = "Box start bar")
input_end_lq                    = input.int(7, "End", -9999999999, 9999999999, 1, inline = "box_position", tooltip = "Box end bar")
candle_size_lq                  = input.float(0.3, "Candle Size", minval = 0, maxval = 99999, step = 0.01, inline = "box_position", tooltip = "Minimum candle size in percent. Example: 1 = 1%, 0.25 = 0.25%") / 100
box_border_bull_color           = input.color(color.rgb(255, 0, 0, 23), "Bull",group = 'BOX BORDER SETTINGS', inline='0')
box_border_bear_color           = input.color(color.new(#02ff02, 18), "Bear",group = 'BOX BORDER SETTINGS', inline='0')
box_border_width                = input.int(1,"Width",minval = 0, maxval = 5,group = 'BOX BORDER SETTINGS', inline='0')
style_string_lq                 = input.string("Dashed", "Style", options = ["Dotted","Dashed","Solid"], group = 'BOX BORDER SETTINGS',inline='0')
box_border_style_lq             = style_string_lq == 'Dotted' ? line.style_dotted : style_string_lq == 'Dashed' ? line.style_dashed : line.style_solid
extendOption_lq                 = input.string("none", title="Extend zones", options=["none", "left", "right", "both"])
lineExtend  = extendOption_lq == "left" ? extend.left :
 extendOption_lq == "right" ? extend.right :
 extendOption_lq == "both" ? extend.both :
 extend.none

label_offset_lq                 = input(1, title = "Label offset")
label_alpha_lq                  = input(80, title = "Transparency")
label_position_lq               = input.string("Close to price", options = ["Close to price", "Far from price"])

i_purge_timeframe               = input.string("30", "Purge timeframe", ["30s", "1", "5", "15", "30", "60", "120", "240", "D", "2D", "W", "M", "3M", "6M", "12M"], group=g_purged, inline='1')
i_purgedLevelColor              = input(color.rgb(44, 44, 44, 90), "Purge Color", group=g_purged, inline='1')
purged_box_border_color         = input.color(color.rgb(94, 94, 94, 23),"Purge Border",group = g_purged,inline='2')
purged_box_border_width         = input.int(1,"Width",minval = 0, maxval = 5,group = g_purged,inline='2')
purged_style_string_lq          = input.string("Dashed","Style",options = ["Dotted","Dashed","Solid"],group = g_purged,inline='2')
purged_box_border_style_lq      = style_string_lq == 'Dotted' ? line.style_dotted : style_string_lq == 'Dashed' ? line.style_dashed : line.style_solid

i_is15mEnabled                   = input(false, "15m   ", inline="15m",group=g_intraday)
i_15mAboveLiquidityColor         = input(color.rgb(255, 145, 0, 80), "", inline="15m",group=g_intraday)
i_15mBelowLiquidityColor         = input(color.rgb(52, 1, 255, 80), "", inline="15m",group=g_intraday)
i_15mHeight                      = input(2, "H", inline="15m",group=g_intraday)
i_15mWidth                       = input(-12, "W", inline="15m",group=g_intraday)
box_size_15m                     = input.float(0.3, "Box Size", minval = 0, maxval = 99999, step = 0.01, group=g_intraday, inline = "15m", tooltip = "Box size in percent. Example: 1 = 1%, 0.25 = 0.25%") / 100

i_is30mEnabled                   = input(false, "30m   ", inline="30m",group=g_intraday)
i_30mAboveLiquidityColor         = input(color.rgb(255, 145, 0, 80), "", inline="30m",group=g_intraday)
i_30mBelowLiquidityColor         = input(color.rgb(52, 1, 255, 80), "", inline="30m", group=g_intraday)
i_30mHeight                      = input(5, "H", inline="30m", group=g_intraday)
i_30mWidth                       = input(-10, "W", inline="30m", group=g_intraday)
box_size_30m                     = input.float(0.3, "Box Size", minval = 0, maxval = 99999, step = 0.01, group=g_intraday, inline = "30m", tooltip = "Box size in percent. Example: 1 = 1%, 0.25 = 0.25%") / 100

i_is1HEnabled                   = input(false, "1H    ", inline="1H",group=g_intraday)
i_1HAboveLiquidityColor         = input(color.rgb(255, 145, 0, 80), "", inline="1H",group=g_intraday)
i_1HBelowLiquidityColor         = input(color.rgb(52, 1, 255, 80), "", inline="1H",group=g_intraday)
i_1HHeight                      = input(8, "H", inline="1H",group=g_intraday)
i_1HWidth                       = input(-8, "W", inline="1H",group=g_intraday)
box_size_1H                     = input.float(0.3, "Box Size", minval = 0, maxval = 99999, step = 0.01, group=g_intraday, inline = "1H", tooltip = "Box size in percent. Example: 1 = 1%, 0.25 = 0.25%") / 100

i_is2HEnabled                   = input(false, "2H    ", inline="2H",group=g_intraday)
i_2HAboveLiquidityColor         = input(color.rgb(255, 145, 0, 80), "", inline="2H",group=g_intraday)
i_2HBelowLiquidityColor         = input(color.rgb(52, 1, 255, 80), "", inline="2H",group=g_intraday)
i_2HHeight                      = input(11, "H", inline="2H",group=g_intraday)
i_2HWidth                       = input(-6, "W", inline="2H",group=g_intraday)
box_size_2H                     = input.float(0.3, "Box Size", minval = 0, maxval = 99999, step = 0.01, group=g_intraday, inline = "2H", tooltip = "Box size in percent. Example: 1 = 1%, 0.25 = 0.25%") / 100

i_is4HEnabled                   = input(false, "4H    ", inline="4H",group=g_intraday)
i_4HAboveLiquidityColor         = input(color.rgb(255, 145, 0, 80), "", inline="4H",group=g_intraday)
i_4HBelowLiquidityColor         = input(color.rgb(52, 1, 255, 80), "", inline="4H",group=g_intraday)
i_4HHeight                      = input(14, "H", inline="4H",group=g_intraday)
i_4HWidth                       = input(-4, "W", inline="4H",group=g_intraday)
box_size_4H                     = input.float(0.3, "Box Size", minval = 0, maxval = 99999, step = 0.01, group=g_intraday, inline = "4H", tooltip = "Box size in percent. Example: 1 = 1%, 0.25 = 0.25%") / 100

i_isDailyEnabled                = input(false, "Daily  ", inline="Daily",group=g_htf)
i_dailyAboveLiquidityColor      = input(color.new(#ff0000, 80), "", inline="Daily",group=g_htf)
i_dailyBelowLiquidityColor      = input(color.new(#09fe01, 80), "", inline="Daily",group=g_htf)
i_dailyHeight                   = input(2, "H", inline="Daily",group=g_htf)
i_dailyWidth                    = input(14, "W", inline="Daily",group=g_htf)
box_size_D                      = input.float(0.3, "Box Size", minval = 0, maxval = 99999, step = 0.01, group=g_htf, inline = "Daily", tooltip = "Box size in percent. Example: 1 = 1%, 0.25 = 0.25%") / 100

i_is2DailyEnabled                = input(true, "2D    ", inline="2D",group=g_htf)
i_2dailyAboveLiquidityColor      = input(color.new(#ff0000, 80), "", inline="2D",group=g_htf)
i_2dailyBelowLiquidityColor      = input(color.new(#09fe01, 80), "", inline="2D",group=g_htf)
i_2dailyHeight                   = input(2, "H", inline="2D",group=g_htf)
i_2dailyWidth                    = input(14, "W", inline="2D",group=g_htf)
box_size_2D                      = input.float(0.3, "Box Size", minval = 0, maxval = 99999, step = 0.01, group=g_htf, inline = "2D", tooltip = "Box size in percent. Example: 1 = 1%, 0.25 = 0.25%") / 100

i_isWeeklyEnabled               = input(true, "Weekly", inline="Weekly", group=g_htf)
i_weeklyAboveLiquidityColor     = input(color.new(#ff0000, 80), "", inline="Weekly", group=g_htf)
i_weeklyBelowLiquidityColor     = input(color.new(#09fe01, 80), "", inline="Weekly", group=g_htf)
i_weeklyHeight                  = input(5, "H", inline="Weekly", group=g_htf)
i_weeklyWidth                   = input(12, "W", inline="Weekly", group=g_htf)
box_size_W                      = input.float(0.3, "Box Size", minval = 0, maxval = 99999, step = 0.01, group=g_htf, inline = "Weekly", tooltip = "Box size in percent. Example: 1 = 1%, 0.25 = 0.25%") / 100

i_isMonthlyEnabled              = input(true, "Monthly", inline="Monthly", group=g_htf)
i_monthlyAboveLiquidityColor    = input(color.rgb(255, 0, 0, 80), "", inline="Monthly", group=g_htf)
i_monthlyBelowLiquidityColor    = input(color.new(#02ff02, 80), "", inline="Monthly", group=g_htf)
i_monthlyHeight                 = input(8, "H", inline="Monthly", group=g_htf)
i_monthlyWidth                  = input(10, "W", inline="Monthly", group=g_htf)
box_size_M                      = input.float(0.3, "Box Size", minval = 0, maxval = 99999, step = 0.01, group=g_htf, inline = "Monthly", tooltip = "Box size in percent. Example: 1 = 1%, 0.25 = 0.25%") / 100

i_is3MonthlyEnabled              = input(true, "3M    ", inline="3M", group=g_htf)
i_3monthlyAboveLiquidityColor    = input(color.rgb(255, 0, 0, 80), "", inline="3M", group=g_htf)
i_3monthlyBelowLiquidityColor    = input(color.new(#02ff02, 80), "", inline="3M", group=g_htf)
i_3monthlyHeight                 = input(11, "H", inline="3M", group=g_htf)
i_3monthlyWidth                  = input(8, "W", inline="3M", group=g_htf)
box_size_3M                      = input.float(0.3, "Box Size", minval = 0, maxval = 99999, step = 0.01, group=g_htf, inline = "3M", tooltip = "Box size in percent. Example: 1 = 1%, 0.25 = 0.25%") / 100

i_is6MonthlyEnabled              = input(true, "6M    ", inline="6M", group=g_htf)
i_6monthlyAboveLiquidityColor    = input(color.rgb(255, 0, 0, 80), "", inline="6M", group=g_htf)
i_6monthlyBelowLiquidityColor    = input(color.new(#02ff02, 80), "", inline="6M", group=g_htf)
i_6monthlyHeight                 = input(14, "H", inline="6M", group=g_htf)
i_6monthlyWidth                  = input(6, "W", inline="6M", group=g_htf)
box_size_6M                      = input.float(0.3, "Box Size", minval = 0, maxval = 99999, step = 0.01, group=g_htf, inline = "6M", tooltip = "Box size in percent. Example: 1 = 1%, 0.25 = 0.25%") / 100

i_is12MonthlyEnabled              = input(true, "12M   ", inline="12M", group=g_htf)
i_12monthlyAboveLiquidityColor    = input(color.rgb(255, 0, 0, 80), "", inline="12M", group=g_htf)
i_12monthlyBelowLiquidityColor    = input(color.new(#02ff02, 80), "", inline="12M", group=g_htf)
i_12monthlyHeight                 = input(17, "H", inline="12M", group=g_htf)
i_12monthlyWidth                  = input(4, "W", inline="12M", group=g_htf)
box_size_12M                      = input.float(0.3, "Box Size", minval = 0, maxval = 99999, step = 0.01, group=g_htf, inline = "12M", tooltip = "Box size in percent. Example: 1 = 1%, 0.25 = 0.25%") / 100

teste = 1
//--------------------------------------------------------------------
//                        Variables declarations
//--------------------------------------------------------------------
var highsArray                  = array.new_float()
var lowsArray                   = array.new_float()
var highLinesArray              = array.new_line()
var lowLinesArray               = array.new_line()
var purgedLinesArray            = array.new_line()
var highBoxesArray              = array.new_box()
var lowBoxesArray               = array.new_box()
var purgedBoxesArray            = array.new_box()
var intradayHighsArray          = array.new_int()
var intradayLowsArray           = array.new_int()
var fvglabelsBull               = array.new_label()
var fvglabelsBear               = array.new_label()
var tfArray                     = array.new_string()

var float dayHigh               = na
var float dayLow                = na

[prevDayHigh, prevDayLow, prevDayClose, prevDaySize]                    = request.security(syminfo.tickerid, "D", [high[teste], low[teste], open[teste], ((high[teste] - low[teste]) / open[teste])])
[prev2DayHigh, prev2DayLow, prev2DayClose, prev2DaySize]                = request.security(syminfo.tickerid, "2D", [high[teste], low[teste], open[teste], ((high[teste] - low[teste]) / open[teste])])
[prevWeekHigh, prevWeekLow, prevWeekClose, prevWeekSize]                = request.security(syminfo.tickerid, "W", [high[teste], low[teste], open[teste], ((high[teste] - low[teste]) / open[teste])])
[prevMonthHigh, prevMonthLow, prevMonthClose, prevMonthSize]            = request.security(syminfo.tickerid, "M", [high[teste], low[teste], open[teste], ((high[teste] - low[teste]) / open[teste])])
[prev3MonthHigh, prev3MonthLow, prev3MonthClose, prev3MonthSize]        = request.security(syminfo.tickerid, "3M", [high[teste], low[teste], open[teste], ((high[teste] - low[teste]) / open[teste])])
[prev6MonthHigh, prev6MonthLow, prev6MonthClose, prev6MonthSize]        = request.security(syminfo.tickerid, "6M", [high[teste], low[teste], open[teste], ((high[teste] - low[teste]) / open[teste])])
[prev12MonthHigh, prev12MonthLow, prev12MonthClose, prev12MonthSize]    = request.security(syminfo.tickerid, "12M", [high[teste], low[teste], open[teste], ((high[teste] - low[teste]) / open[teste])])
[prev4HHigh, prev4HLow, prev4HClose, prev4HSize]                        = request.security(syminfo.tickerid, "240", [high[teste], low[teste], open[teste], ((high[teste] - low[teste]) / open[teste])])
[prev2HHigh, prev2HLow, prev2HClose, prev2HSize]                        = request.security(syminfo.tickerid, "120", [high[teste], low[teste], open[teste], ((high[teste] - low[teste]) / open[teste])])
[prev1HHigh, prev1HLow, prev1HClose, prev1HSize]                        = request.security(syminfo.tickerid, "60", [high[teste], low[teste], open[teste], ((high[teste] - low[teste]) / open[teste])])
[prev30mHigh, prev30mLow, prev30mClose, prev30mSize]                    = request.security(syminfo.tickerid, "30", [high[teste], low[teste], open[teste], ((high[teste] - low[teste]) / open[teste])])
[prev15mHigh, prev15mLow, prev15mClose, prev15mSize]                    = request.security(syminfo.tickerid, "15", [high[teste], low[teste], open[teste], ((high[teste] - low[teste]) / open[teste])])

//--------------------------------------------------------------------
//                              Functions 
//--------------------------------------------------------------------
f_drawLine(float _y, int _x1, int _x2, color _c, int _w=1) => 
    line.new(_x1, _y, _x2, _y, color=_c, width=_w)

f_drawBox(float _y1, float _y2, int _x1, int _x2, color _c, color _border_color, int _border_width, string _border_style, string _extendOption_lq) => 
    box.new(_x1, _y1, _x2, _y2, bgcolor = _c, border_color = _border_color, border_width = _border_width, border_style = _border_style, extend = _extendOption_lq)
    //line.new(_x1, _y1, _x2, _y, color=_c, width=_w)

f_drawLabel(_fvglabelsarray, _bar_index, _positiony, _string, _color, _style, y) =>
    blabel = label.new(_bar_index, _positiony ,text=_string,color=color.rgb(0,0,0, label_alpha_lq),style = _style) //_string,color=color.rgb(0,0,0,100),style = _style) 
    if barstate.islast
        label.set_textcolor(blabel,color.new(_color, 10))//color.rgb(label_red,label_grn,label_blu,label_trans))
        label.set_xy(blabel, _bar_index, _positiony)
        label.set_size(blabel,size.normal)
    array.push(_fvglabelsarray,blabel)

useClose = false
f_create(float _high, float _low, float _close, color _upperColor, color _lowerColor, int _lineHeight, int _linewidth, string p_tf, float p_box_size) =>
    float point_up = _high
    float point_down = _low

    if useClose
        point_up := _close
        point_down := _close

    array.push(highsArray, point_up)
    array.push(lowsArray, point_down)
    array.push(tfArray, p_tf)

    barra_inicial = bar_index + input_start_lq - 1
    if (box_mode_lq)
        if (short_mode_lq)
            array.push(highBoxesArray, f_drawBox(point_up, point_up - (p_box_size * point_up), barra_inicial, bar_index + input_end_lq, _upperColor, color.new(_upperColor, 0), box_border_width, box_border_style_lq, lineExtend))
            array.push(lowBoxesArray, f_drawBox(point_down, point_down + (p_box_size * point_down), barra_inicial, bar_index + input_end_lq, _lowerColor, color.new(_lowerColor, 0), box_border_width, box_border_style_lq, lineExtend))   
        else
            array.push(highBoxesArray, f_drawBox(point_up, point_up - (p_box_size * point_up), barra_inicial, bar_index + input_end_lq, _upperColor, color.new(_upperColor, 0), box_border_width, box_border_style_lq, lineExtend))
            array.push(lowBoxesArray, f_drawBox(point_down, point_down + (p_box_size * point_down), barra_inicial, bar_index + input_end_lq, _lowerColor, color.new(_lowerColor, 0), box_border_width, box_border_style_lq, lineExtend))    
    else
        if (short_mode_lq)
            array.push(highLinesArray, f_drawLine(point_up, bar_index + input_start_lq, bar_index + input_start_lq +_linewidth, _upperColor, _lineHeight))
            array.push(lowLinesArray, f_drawLine(point_down, bar_index + input_start_lq, bar_index + input_start_lq + _linewidth, _lowerColor, _lineHeight))
        else
            array.push(highLinesArray, f_drawLine(point_up, bar_index, bar_index, _upperColor, 4))
            array.push(lowLinesArray, f_drawLine(point_down, bar_index, bar_index, _lowerColor, 4))
            
f_updateStickyLevels(array<line> _levels) =>
    for [index, _line] in _levels
        int x1 = line.get_x1(_line)
        int x2 = line.get_x2(_line)
        int size = x2 - x1
        if (short_mode_lq)
            if barstate.islast
                line.set_x1(_line, bar_index + input_start_lq)
                line.set_x2(_line, bar_index + input_end_lq)
        else
            if barstate.islast
                line.set_x1(_line, bar_index + input_end_lq)
            //line.set_x1(_line, bar_index + START_OFFSET + 2)
            //line.set_x2(_line, bar_index + END_OFFSET) 

f_moveLevel(array<line> _from, array<line> _to, line _level, int _index) =>
    array.push(_to, _level)
    array.remove(_from, _index)

f_highlightPurgedLevel(line _level, color purge_color, p_style) =>
    _style = p_style == "Solid" ? line.style_solid : p_style == "Dashed" ? line.style_dashed : line.style_dotted
    if barstate.islast
        line.set_color(_level, purge_color)
        line.set_style(_level, _style)

f_updateUpperLevels(float _high, array<float> _highs, array<line> _levels, array<line> _purgedLevels) =>
    while array.min(_highs) < _high
        for [_index, _value] in _highs
            if _high > _value
                _line = array.get(_levels, _index)
                f_highlightPurgedLevel(_line, i_purgedLevelColor, purged_style_string_lq)
                f_moveLevel(_levels, _purgedLevels, _line, _index)
                array.remove(_highs, _index)

f_updateLowerLevels(float _low, array<float> _lows, array<line> _levels, array<line> _purgedLevels) =>
    while array.max(_lows) > _low
        for [_index, _value] in _lows
            if _low < _value
                _line = array.get(_levels, _index)
                f_highlightPurgedLevel(_line, i_purgedLevelColor, purged_style_string_lq)
                f_moveLevel(_levels, _purgedLevels, _line, _index) 
                array.remove(_lows, _index)

f_clearLevels(array<line> _levels) =>
    while array.size(_levels) > 0
        for [_index, _line] in _levels
            line.delete(array.remove(_levels, _index))

f_isHigherTimeframe(string _timeframe) => timeframe.in_seconds() <= timeframe.in_seconds(_timeframe)


// Boxes
f_update_Boxes(array<box> _boxes) =>
    if array.size(_boxes) > 0
        for i = 0 to array.size(_boxes) - 1 
            boxid = array.get(_boxes, i) 
            if (short_mode_lq)
                box.set_left(boxid, bar_index + input_start_lq)
                box.set_right(boxid, bar_index + input_end_lq)
            else
                box.set_right(boxid, bar_index + input_end_lq)

// Boxes
f_updateLabels() =>
    barra_inicial = bar_index + input_start_lq
    for i = 0 to array.size(highsArray) - 1
        top = array.get(highsArray, i)
        bottom = array.get(lowsArray, i)
        tf = array.get(tfArray, i)
        float position = 0
        if label_position_lq == "Close to price"
            position := bottom
        else
            position := top  
        array.push(fvglabelsBear, label.new(x = bar_index + input_end_lq, y = position, text = tf, yloc = yloc.price, color = color.rgb(0,0,0, label_alpha_lq), textcolor = box_border_bull_color, style = label.style_label_left))

    for j = 0 to array.size(lowsArray) - 1
        top = array.get(highsArray, j)
        bottom = array.get(lowsArray, j)
        tf = array.get(tfArray, j)
        float position = 0
        if label_position_lq == "Close to price"
            position := top
        else
            position := bottom  
        array.push(fvglabelsBull, label.new(x = bar_index + input_end_lq, y = position, text = tf, yloc = yloc.price, color = color.rgb(0,0,0, label_alpha_lq), textcolor = box_border_bear_color, style = label.style_label_left))


f_moveLevelB(array<box> _from, array<box> _to, box _level, int _index) =>
    array.push(_to, _level)
    array.remove(_from, _index)

f_highlightPurgedLevelB(box _level, color purge_color, p_border_color, p_style, p_width) =>
    _style = p_style == "Solid" ? line.style_solid : p_style == "Dashed" ? line.style_dashed : line.style_dotted
    if barstate.islast
        box.set_bgcolor(_level, purge_color)
        box.set_border_color(_level, p_border_color)
        box.set_border_style(_level, _style)
        box.set_border_width(_level, p_width)

f_updateUpperLevelsB(float _high, array<float> _highs, array<box> _levels, array<box> _purgedLevels) =>
    while array.min(_highs) < _high
        for [_index, _value] in _highs
            if _high > _value
                _box = array.get(_levels, _index)
                f_highlightPurgedLevelB(_box, i_purgedLevelColor, purged_box_border_color, purged_style_string_lq, purged_box_border_width)
                f_moveLevelB(_levels, _purgedLevels, _box, _index)
                array.remove(_highs, _index)

f_updateLowerLevelsB(float _low, array<float> _lows, array<box> _levels, array<box> _purgedLevels) =>
    while array.max(_lows) > _low
        for [_index, _value] in _lows
            if _low < _value
                _box = array.get(_levels, _index)
                f_highlightPurgedLevelB(_box, i_purgedLevelColor, purged_box_border_color, purged_style_string_lq, purged_box_border_width)
                f_moveLevelB(_levels, _purgedLevels, _box, _index) 
                array.remove(_lows, _index)

f_clearLevelsB(array<box> _levels) =>
    while array.size(_levels) > 0
        for [_index, _box] in _levels
            box.delete(array.remove(_levels, _index))

    // while array.size(fvglabelsBull) > 0
    //     for [_index, _box] in fvglabelsBull
    //         label.delete(array.remove(fvglabelsBull, _index))

// Clean up, at the end of each purge period, levels that had their liquidity taken
f_checkpurge(tf) =>
    if ta.change(time(tf))
        if (box_mode_lq)
            f_clearLevelsB(purgedBoxesArray)
        else
            f_clearLevels(purgedLinesArray)
//--------------------------------------------------------------------
//                                Logic
//--------------------------------------------------------------------
// Create levels on historical bars
if i_is15mEnabled and f_isHigherTimeframe("15") and ta.change(time("15")) and prev15mSize >= candle_size_lq
    f_create(prev15mHigh, prev15mLow, prev15mClose, i_15mAboveLiquidityColor, i_15mBelowLiquidityColor, i_15mHeight, i_15mWidth, "15", box_size_15m)

if i_is30mEnabled and f_isHigherTimeframe("30") and ta.change(time("30")) and prev30mSize >= candle_size_lq
    f_create(prev30mHigh, prev30mLow, prev30mClose, i_30mAboveLiquidityColor, i_30mBelowLiquidityColor, i_30mHeight, i_30mWidth, "30", box_size_30m)

if i_is1HEnabled and f_isHigherTimeframe("60") and ta.change(time("60")) and prev1HSize >= candle_size_lq
    f_create(prev1HHigh, prev1HLow, prev1HClose, i_1HAboveLiquidityColor, i_1HBelowLiquidityColor, i_1HHeight, i_1HWidth, "60", box_size_1H)

if i_is2HEnabled and f_isHigherTimeframe("120") and ta.change(time("120")) and prev2HSize >= candle_size_lq
    f_create(prev2HHigh, prev2HLow, prev2HClose, i_2HAboveLiquidityColor, i_2HBelowLiquidityColor, i_2HHeight, i_2HWidth, "120", box_size_2H)

if i_is4HEnabled and f_isHigherTimeframe("240") and ta.change(time("240")) and prev4HSize >= candle_size_lq
    f_create(prev4HHigh, prev4HLow, prev4HClose, i_4HAboveLiquidityColor, i_4HBelowLiquidityColor, i_4HHeight, i_4HWidth, "240", box_size_4H)

if i_isDailyEnabled and f_isHigherTimeframe("D") and ta.change(time("D")) and prevDaySize >= candle_size_lq
    f_create(prevDayHigh, prevDayLow, prevDayClose, i_dailyAboveLiquidityColor, i_dailyBelowLiquidityColor, i_dailyHeight, i_dailyWidth, "D", box_size_D)

if i_is2DailyEnabled and f_isHigherTimeframe("2D") and ta.change(time("2D")) and prev2DaySize >= candle_size_lq
    f_create(prev2DayHigh, prev2DayLow, prev2DayClose, i_2dailyAboveLiquidityColor, i_2dailyBelowLiquidityColor, i_2dailyHeight, i_2dailyWidth, "2D", box_size_2D)

if i_isWeeklyEnabled and f_isHigherTimeframe("W") and ta.change(time("W")) and prevWeekSize >= candle_size_lq
    f_create(prevWeekHigh, prevWeekLow, prevWeekClose, i_weeklyAboveLiquidityColor, i_weeklyBelowLiquidityColor, i_weeklyHeight, i_weeklyWidth, "W", box_size_W)

if i_isMonthlyEnabled and f_isHigherTimeframe("M") and ta.change(time("M")) and prevMonthSize >= candle_size_lq
    f_create(prevMonthHigh, prevMonthLow, prevMonthClose, i_monthlyAboveLiquidityColor, i_monthlyBelowLiquidityColor, i_monthlyHeight, i_monthlyWidth, "M", box_size_M)

if i_is3MonthlyEnabled and f_isHigherTimeframe("3M") and ta.change(time("3M")) and prev3MonthSize >= candle_size_lq
    f_create(prev3MonthHigh, prev3MonthLow, prev3MonthClose, i_3monthlyAboveLiquidityColor, i_3monthlyBelowLiquidityColor, i_3monthlyHeight, i_3monthlyWidth, "3M", box_size_3M)

if i_is6MonthlyEnabled and f_isHigherTimeframe("6M") and ta.change(time("6M")) and prev6MonthSize >= candle_size_lq
    f_create(prev6MonthHigh, prev6MonthLow, prev6MonthClose, i_6monthlyAboveLiquidityColor, i_6monthlyBelowLiquidityColor, i_6monthlyHeight, i_6monthlyWidth, "6M", box_size_6M)

if i_is12MonthlyEnabled and f_isHigherTimeframe("12M") and ta.change(time("12M")) and prev12MonthSize >= candle_size_lq
    f_create(prev12MonthHigh, prev12MonthLow, prev12MonthClose, i_12monthlyAboveLiquidityColor, i_12monthlyBelowLiquidityColor, i_12monthlyHeight, i_12monthlyWidth, "12M", box_size_12M)

// Set and highlight, immediately, levels that got their liquidity taken
if (box_mode_lq)
    f_updateUpperLevelsB(high, highsArray, highBoxesArray, purgedBoxesArray)
    f_updateLowerLevelsB(low, lowsArray, lowBoxesArray, purgedBoxesArray)
else
    f_updateUpperLevels(high, highsArray, highLinesArray, purgedLinesArray)
    f_updateLowerLevels(low, lowsArray, lowLinesArray, purgedLinesArray)

f_checkpurge(i_purge_timeframe)

// Update levels positions to "stick" at the right of the latest bar
if barstate.islast
    if (box_mode_lq)
        f_update_Boxes(highBoxesArray)
        f_update_Boxes(lowBoxesArray)
        f_update_Boxes(purgedBoxesArray)
        //f_updateLabels()
        //f_updateLabels(fvglabelsBull)
    else
        f_updateStickyLevels(highLinesArray)
        f_updateStickyLevels(lowLinesArray)
        f_updateStickyLevels(purgedLinesArray)